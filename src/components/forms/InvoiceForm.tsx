import { useState, useEffect } from "react";
import { useForm, useFieldArray } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { supabase } from "@/integrations/supabase/client";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { useToast } from "@/hooks/use-toast";
import { Loader2, Plus, Trash2 } from "lucide-react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

const lineItemSchema = z.object({
  service_type: z.string().min(1, "Service type is required"),
  description: z.string().min(1, "Description is required"),
  quantity: z.number().min(0.01, "Quantity must be greater than 0"),
  unit_price: z.number().min(0, "Unit price must be non-negative"),
  tax_rate: z.number().min(0).max(100).default(0),
  discount_percentage: z.number().min(0).max(100).default(0),
});

const invoiceSchema = z.object({
  customer_id: z.string().min(1, "Customer is required"),
  due_date: z.string().min(1, "Due date is required"),
  billing_period_start: z.string().optional(),
  billing_period_end: z.string().optional(),
  currency: z.string().default("USD"),
  notes: z.string().optional(),
  line_items: z.array(lineItemSchema).min(1, "At least one line item is required"),
});

type InvoiceFormData = z.infer<typeof invoiceSchema>;

interface InvoiceFormProps {
  invoice?: any;
  customers: any[];
  onSuccess: () => void;
  onCancel: () => void;
}

export function InvoiceForm({ 
  invoice, 
  customers, 
  onSuccess, 
  onCancel 
}: InvoiceFormProps) {
  const [isLoading, setIsLoading] = useState(false);
  const { toast } = useToast();

  const form = useForm<InvoiceFormData>({
    resolver: zodResolver(invoiceSchema),
    defaultValues: invoice ? {
      customer_id: invoice.customer_id,
      due_date: invoice.due_date,
      billing_period_start: invoice.billing_period_start || "",
      billing_period_end: invoice.billing_period_end || "",
      currency: invoice.currency || "USD",
      notes: invoice.notes || "",
      line_items: invoice.line_items || [
        {
          service_type: "anpr_subscription",
          description: "",
          quantity: 1,
          unit_price: 0,
          tax_rate: 0,
          discount_percentage: 0,
        }
      ],
    } : {
      currency: "USD",
      line_items: [
        {
          service_type: "anpr_subscription",
          description: "",
          quantity: 1,
          unit_price: 0,
          tax_rate: 0,
          discount_percentage: 0,
        }
      ],
    },
  });

  const { fields, append, remove } = useFieldArray({
    control: form.control,
    name: "line_items",
  });

  const watchedLineItems = form.watch("line_items");

  // Calculate totals
  const calculateLineTotal = (item: any) => {
    const subtotal = item.quantity * item.unit_price;
    const discountAmount = subtotal * (item.discount_percentage / 100);
    const afterDiscount = subtotal - discountAmount;
    const taxAmount = afterDiscount * (item.tax_rate / 100);
    return afterDiscount + taxAmount;
  };

  const subtotal = watchedLineItems.reduce((sum, item) => {
    return sum + (item.quantity * item.unit_price);
  }, 0);

  const totalDiscount = watchedLineItems.reduce((sum, item) => {
    return sum + (item.quantity * item.unit_price * (item.discount_percentage / 100));
  }, 0);

  const totalTax = watchedLineItems.reduce((sum, item) => {
    const afterDiscount = (item.quantity * item.unit_price) - (item.quantity * item.unit_price * (item.discount_percentage / 100));
    return sum + (afterDiscount * (item.tax_rate / 100));
  }, 0);

  const totalAmount = subtotal - totalDiscount + totalTax;

  const onSubmit = async (data: InvoiceFormData) => {
    try {
      setIsLoading(true);

      const invoiceData = {
        customer_id: data.customer_id,
        due_date: data.due_date,
        billing_period_start: data.billing_period_start || null,
        billing_period_end: data.billing_period_end || null,
        currency: data.currency,
        notes: data.notes || null,
        subtotal: subtotal,
        tax_amount: totalTax,
        discount_amount: totalDiscount,
        total_amount: totalAmount,
        outstanding_amount: totalAmount,
        invoice_number: "", // Will be auto-generated by database trigger
      } as any;

      if (invoice) {
        const { error } = await supabase
          .from("invoices")
          .update(invoiceData)
          .eq("id", invoice.id);

        if (error) throw error;

        // Delete existing line items and insert new ones
        await supabase
          .from("invoice_line_items")
          .delete()
          .eq("invoice_id", invoice.id);

        const lineItemsData = data.line_items.map(item => ({
          invoice_id: invoice.id,
          service_type: item.service_type,
          description: item.description,
          quantity: item.quantity,
          unit_price: item.unit_price,
          line_total: calculateLineTotal(item),
          tax_rate: item.tax_rate,
          discount_percentage: item.discount_percentage,
        }));

        await supabase
          .from("invoice_line_items")
          .insert(lineItemsData);
        
        toast({
          title: "Success",
          description: "Invoice updated successfully",
        });
      } else {
        const { data: newInvoice, error } = await supabase
          .from("invoices")
          .insert([invoiceData])
          .select()
          .single();

        if (error) throw error;

        const lineItemsData = data.line_items.map(item => ({
          invoice_id: newInvoice.id,
          service_type: item.service_type,
          description: item.description,
          quantity: item.quantity,
          unit_price: item.unit_price,
          line_total: calculateLineTotal(item),
          tax_rate: item.tax_rate,
          discount_percentage: item.discount_percentage,
        }));

        await supabase
          .from("invoice_line_items")
          .insert(lineItemsData);
        
        toast({
          title: "Success", 
          description: "Invoice created successfully",
        });
      }

      onSuccess();
    } catch (error: any) {
      toast({
        title: "Error",
        description: error.message || "Failed to save invoice",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <FormField
            control={form.control}
            name="customer_id"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Customer</FormLabel>
                <Select onValueChange={field.onChange} defaultValue={field.value}>
                  <FormControl>
                    <SelectTrigger>
                      <SelectValue placeholder="Select customer" />
                    </SelectTrigger>
                  </FormControl>
                  <SelectContent>
                    {customers.map((customer) => (
                      <SelectItem key={customer.id} value={customer.id}>
                        {customer.billing_name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                <FormMessage />
              </FormItem>
            )}
          />

          <FormField
            control={form.control}
            name="due_date"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Due Date</FormLabel>
                <FormControl>
                  <Input type="date" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <FormField
            control={form.control}
            name="billing_period_start"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Billing Period Start</FormLabel>
                <FormControl>
                  <Input type="date" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />

          <FormField
            control={form.control}
            name="billing_period_end"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Billing Period End</FormLabel>
                <FormControl>
                  <Input type="date" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />
        </div>

        <FormField
          control={form.control}
          name="currency"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Currency</FormLabel>
              <Select onValueChange={field.onChange} defaultValue={field.value}>
                <FormControl>
                  <SelectTrigger className="w-32">
                    <SelectValue />
                  </SelectTrigger>
                </FormControl>
                <SelectContent>
                  <SelectItem value="USD">USD</SelectItem>
                  <SelectItem value="EUR">EUR</SelectItem>
                  <SelectItem value="INR">INR</SelectItem>
                  <SelectItem value="GBP">GBP</SelectItem>
                </SelectContent>
              </Select>
              <FormMessage />
            </FormItem>
          )}
        />

        <Card>
          <CardHeader>
            <CardTitle className="flex items-center justify-between">
              Line Items
              <Button
                type="button"
                variant="outline"
                size="sm"
                onClick={() => append({
                  service_type: "anpr_subscription",
                  description: "",
                  quantity: 1,
                  unit_price: 0,
                  tax_rate: 0,
                  discount_percentage: 0,
                })}
              >
                <Plus className="h-4 w-4 mr-2" />
                Add Item
              </Button>
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            {fields.map((field, index) => (
              <div key={field.id} className="border rounded-lg p-4 space-y-4">
                <div className="flex justify-between items-start">
                  <h4 className="font-medium">Item {index + 1}</h4>
                  {fields.length > 1 && (
                    <Button
                      type="button"
                      variant="ghost"
                      size="sm"
                      onClick={() => remove(index)}
                    >
                      <Trash2 className="h-4 w-4" />
                    </Button>
                  )}
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <FormField
                    control={form.control}
                    name={`line_items.${index}.service_type`}
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Service Type</FormLabel>
                        <Select onValueChange={field.onChange} defaultValue={field.value}>
                          <FormControl>
                            <SelectTrigger>
                              <SelectValue placeholder="Select service" />
                            </SelectTrigger>
                          </FormControl>
                          <SelectContent>
                            <SelectItem value="anpr_subscription">ANPR Subscription</SelectItem>
                            <SelectItem value="camera_fee">Camera Fee</SelectItem>
                            <SelectItem value="maintenance">Maintenance</SelectItem>
                            <SelectItem value="advertising">Advertising</SelectItem>
                            <SelectItem value="setup_fee">Setup Fee</SelectItem>
                          </SelectContent>
                        </Select>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name={`line_items.${index}.description`}
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Description</FormLabel>
                        <FormControl>
                          <Input placeholder="Enter description" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>

                <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                  <FormField
                    control={form.control}
                    name={`line_items.${index}.quantity`}
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Quantity</FormLabel>
                        <FormControl>
                          <Input 
                            type="number" 
                            step="0.01"
                            {...field}
                            onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name={`line_items.${index}.unit_price`}
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Unit Price</FormLabel>
                        <FormControl>
                          <Input 
                            type="number" 
                            step="0.01"
                            {...field}
                            onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name={`line_items.${index}.tax_rate`}
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Tax Rate (%)</FormLabel>
                        <FormControl>
                          <Input 
                            type="number" 
                            step="0.01"
                            max="100"
                            {...field}
                            onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <FormField
                    control={form.control}
                    name={`line_items.${index}.discount_percentage`}
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Discount (%)</FormLabel>
                        <FormControl>
                          <Input 
                            type="number" 
                            step="0.01"
                            max="100"
                            {...field}
                            onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </div>

                <div className="text-right text-sm text-muted-foreground">
                  Line Total: ${calculateLineTotal(watchedLineItems[index] || {}).toFixed(2)}
                </div>
              </div>
            ))}
          </CardContent>
        </Card>

        {/* Invoice Totals */}
        <Card>
          <CardContent className="pt-6">
            <div className="space-y-2 text-right">
              <div className="flex justify-between">
                <span>Subtotal:</span>
                <span>${subtotal.toFixed(2)}</span>
              </div>
              <div className="flex justify-between">
                <span>Discount:</span>
                <span>-${totalDiscount.toFixed(2)}</span>
              </div>
              <div className="flex justify-between">
                <span>Tax:</span>
                <span>${totalTax.toFixed(2)}</span>
              </div>
              <div className="border-t pt-2 font-semibold flex justify-between">
                <span>Total:</span>
                <span>${totalAmount.toFixed(2)}</span>
              </div>
            </div>
          </CardContent>
        </Card>

        <FormField
          control={form.control}
          name="notes"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Notes</FormLabel>
              <FormControl>
                <Textarea 
                  placeholder="Enter any additional notes..."
                  {...field} 
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />

        <div className="flex justify-end space-x-2">
          <Button type="button" variant="outline" onClick={onCancel}>
            Cancel
          </Button>
          <Button type="submit" disabled={isLoading}>
            {isLoading && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
            {invoice ? "Update" : "Create"} Invoice
          </Button>
        </div>
      </form>
    </Form>
  );
}